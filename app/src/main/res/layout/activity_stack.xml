<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Stack">
    <TextView
        android:id="@+id/textView4"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Stacks"
        android:textStyle="bold"
        android:textSize="36sp"
        android:textColor="@color/black"
        android:layout_marginTop="24dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <ScrollView
        android:layout_width="409dp"
        android:layout_height="795dp"
        android:layout_marginTop="14dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        android:padding="12dp"
        app:layout_constraintTop_toBottomOf="@+id/textView4">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="8dp"
            tools:ignore="ExtraText">
            <TextView
                android:id="@+id/arrayintro"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:justificationMode="inter_word"
                android:text="A stack is a linear data structure that store data in an order known as the Last In First Out (LIFO) order. This property is helpful in certain programming cases where the data needs to be ordered."
                android:textSize="24sp"
                android:textColor="@color/black"/>
            <ImageView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:src="@drawable/stack"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:justificationMode="inter_word"
                android:text="Stacks can be visualised like a stack of plates on a table. Only the top plate is accessible by the user at any given instant. The other plates are hidden and are not accessible by the user. The last plate that is kept on the stack is retrieved first."
                android:textSize="24sp"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="Creating a Stack"
                android:textSize="36sp"
                android:textStyle="bold"/>
            <TextView
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:justificationMode="inter_word"
                android:text="A stack can be created using both an array or through a linked list. For simplicity, we will create one with an array.\n1.First, we create a one-dimensional array with fixed size (int stack[SIZE]). The SIZE value could be defined using a preprocessor.\n2.Define a integer variable top and initialize with \‘-1\’ ( int top = -1)."
                android:textSize="24sp"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="#define SIZE 10\nint stack[SIZE]\;\nint top = -1\;"
                android:textColor="@color/purple_700"
                android:textSize="24sp"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="Operations in a Stack"
                android:textSize="36sp"
                android:textStyle="bold"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="The two primary operations in a stack are the push and the pop operations:"
                android:textSize="24sp"
                android:justificationMode="inter_word"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="Push Operations"
                android:textSize="36sp"
                android:textStyle="bold"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="This is used to add (or push) an element to the stack. The element always gets added to the top of the current stack items."
                android:textSize="24sp"
                android:justificationMode="inter_word"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="void push(int value) {\n   if(top &#x0003D;&#x0003D; SIZE-1)  printf(&quot;\\nOverflow. Stack is Full&quot;)\;\n   else{\n     top++\;\n     stack[top] = value;     printf(&quot;\\nInsertion was successful&quot;)\;\n   }\n}"
                android:textColor="@color/purple_700"
                android:textSize="24sp"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="Pop Operations"
                android:textSize="36sp"
                android:textStyle="bold"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="This is used to remove (or pop) an element from the stack. The element always gets popped off from the top of the stack."
                android:textSize="24sp"
                android:justificationMode="inter_word"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="void pop() {\n   if(top &#x0003D;&#x0003D; -1)  printf(&quot;\\nUnderflow. Stack is empty&quot;)\;\n   else{\n     printf(&quot;\\nDeleted : %d&quot;, stack[top])\;\n     top--\;\n   }\n}"
                android:textColor="@color/purple_700"
                android:textSize="24sp"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="Peek Operations"
                android:textSize="36sp"
                android:textStyle="bold"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="The peek operation is used to return the first element of the stack without removing the element. It is a variation of the pop operation."
                android:textSize="24sp"
                android:justificationMode="inter_word"
                android:textColor="@color/black"/>
            <TextView
                android:layout_margin="4dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:text="void peek() {\n   if(top &#x0003D;&#x0003D; -1)\n     printf(&quot;\\nThe Stack is empty&quot;)\;\n     break\;\n   }\n   else{\n     printf(&quot;\%d&quot;, stack[top])\;\n   }\n}"
                android:textColor="@color/purple_700"
                android:textSize="24sp"/>

        </LinearLayout>
    </ScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>